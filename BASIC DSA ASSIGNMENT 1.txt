Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?
Ans.
  const twoSum = (arr, num) => {
  let obj = {};
  let res = [];
  arr.map((item) => {
    let com = num - item;
    if (obj[com]) {
      res.push([obj[com], item]);
    } else {
      obj[item] = item;
    }
  });
  return res;
};
let arr = [2, 3, 2, 5, 4, 9, 6, 8, 8, 7];
let num = 10;
console.log(twoSum(arr, num));


Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.
Ans.
    reverseArray = (arr) => {
  for (let i = 0; i < arr.length / 2; i++) {
    [arr[i], arr[arr.length - 1 - i]] = [arr[arr.length - 1 - i], arr[i]];
  }
  return arr;
};
let arr = ["ab", "bc", "cd", "da"];
console.log(reverseArray(arr));

Q3. Write a program to check if two strings are a rotation of each other?
Ans. function rotEq(str1, str2) {
  var str = str1 + str1;
  return str.includes(str2);
}
console.log(rotEq("abcd", "bcda"));
console.log(rotEq("abcde", "cdeab"));
console.log(rotEq("abcd", "acdb"));


Q4. Write a program to print the first non-repeated character from a string?
Ans. 
  function FirstNotRepeatedChar(str) {
  var arra1 = str.split('');
  var result = '';
  var ctr = 0;

  for (var i = 0; i < arra1.length; i++) {
    ctr = 0;

    for (var y = 0; y < arra1.length; y++) 
    {
      if (arra1[i] === arra1[y]) {
        ctr+= 1;
      }
    }

    if (ctr < 2) {
      result = arra1[i];
      break;
    }
  }
  return result;
}
console.log(FirstNotRepeatedChar('abacddbec'));

Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.




Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.
Ans.  function isOperator(x) {
  switch (x) {
    case "+":
    case "-":
    case "/":
    case "*":
      return true;
  }
  return false;
}

function postToPre(post_exp) {
  let s = [];

  let length = post_exp.length;

  for (let i = 0; i < length; i++) {
    if (isOperator(post_exp[i])) {
      let op1 = s[s.length - 1];
      s.pop();
      let op2 = s[s.length - 1];
      s.pop();

      let temp = post_exp[i] + op2 + op1;

      s.push(temp);
    } else {
      s.push(post_exp[i] + "");
    }
  }

  let ans = "";
  while (s.length > 0) ans += s.pop();
  return ans;
}

let post_exp = "ABC/-AK/L-*";
console.log("Prefix : " + postToPre(post_exp));



Q7. Write a program to convert prefix expression to infix expression.
Ans.  function isOperator(x) {
  switch (x) {
    case "+":
    case "-":
    case "*":
    case "/":
    case "^":
    case "%":
      return true;
  }
  return false;
}

function convert(str) {
  let stack = [];

 let l = str.length;

  for (let i = l - 1; i >= 0; i--) {
    let c = str[i];

    if (isOperator(c)) {
      let op1 = stack[stack.length - 1];
      stack.pop();
      let op2 = stack[stack.length - 1];
      stack.pop();

      let temp = "(" + op1 + c + op2 + ")";
      stack.push(temp);
    } else {
      stack.push(c + "");
    }
  }
  return stack[stack.length - 1];
}

let exp = "*-A/BC-/AKL";

console.log("Infix : " + convert(exp));



Q8. Write a program to check if all the brackets are closed in a given code snippet.
Ans. function areBracketsBalanced(expr) {
  let stack = [];
  for (let i = 0; i < expr.length; i++) {
    let x = expr[i];

    if (x == "(" || x == "[" || x == "{") {
      stack.push(x);
      continue;
    }

    if (stack.length == 0) return false;

    let check;
    switch (x) {
      case ")":
        check = stack.pop();
        if (check == "{" || check == "[") return false;
        break;

      case "}":
        check = stack.pop();
        if (check == "(" || check == "[") return false;
        break;

      case "]":
        check = stack.pop();
        if (check == "(" || check == "{") return false;
        break;
    }
  }

  return stack.length == 0;
}

let expr = "([{}])";

if (areBracketsBalanced(expr)) console.log("Balanced ");
else console.log("Not Balanced ");


Q9. Write a program to reverse a stack.
Ans. class Stack {
  constructor() {
    this.top = null;
  }
  push(ele) {
    var node = new newNode(ele);
    node.next = this.top;
    this.top = node;
  }
  pop() {
    var temp = this.top;
    var char = temp.data;
    this.top = this.top.next;
    temp = null;
    return char;
  }
  reverseString(str) {
    var i = 0;
    var reversestr = "";
    while (i != str.length) {
      this.push(str.charAt(i));
      i++;
    }
    var temp = this.top;
    while (temp != null) {
      var char;
      char = this.pop();
      reversestr += char;
      temp = this.top;
    }
    return reversestr;
  }
  display() {
    var temp = this.top;
    while (temp != null) {
      console.log(temp.data);
      temp = temp.next;
    }
  }
}
class newNode {
  constructor(data, next) {
    this.data = data;
    this.next = null;
  }
}

const stack = new Stack();
const string = "Mayank";
const reverse = stack.reverseString(string);
console.log(
  `The String provided - ${string}\nString in reverse format -${reverse}`
);



Q10. Write a program to find the smallest number using a stack.
Ans. class Stack {
  constructor() {
    this.items = [];
  }

  add(element) {
    return this.items.push(element);
  }
}

let stack = new Stack();
stack.add(8);
stack.add(2);
stack.add(1);
stack.add(8);
console.log(stack.items);

var minvalue = stack.items[0];
for (var i = 0; i < stack.items.length; i++) {
  if (stack.items[i] < minvalue) {
    minvalue = stack.items[i];
  }
}
console.log(minvalue);

