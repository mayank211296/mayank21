Q.1 Delete the elements in an linked list whose sum is equal to zero
Ans. 

Q.2 Reverse a linked list in groups of given size
Ans.
var head;

// Linked list Node
class Node {
  constructor(val) {
    this.data = val;
    this.next = null;
  }
}

function reverse(head, k) {
  if (head == null) return null;
  var current = head;
  var next = null;
  var prev = null;

  var count = 0;

  // Reverse first k nodes of
  // linked list
  while (count < k && current != null) {
    next = current.next;
    current.next = prev;
    prev = current;
    current = next;
    count++;
  }

  
  if (next != null) head.next = reverse(next, k);

  // prev is now head of input list
  return prev;
}

function push(new_data) {
  /* 1 & 2: Allocate the Node & 
              Put in the data */
  new_node = new Node(new_data);

  // 3. Make next of new Node as head
  new_node.next = head;

  // 4. Move the head to point to
  // new Node
  head = new_node;
}

// Function to print linked list
function printList() {
  temp = head;
  while (temp != null) {
    console.log(temp.data + " ");
    temp = temp.next;
  }
  console.log("<br/>");
}

// Driver code
/* Create Linked List
1->2->3->4->5->6-> 7->8->8->9->null */
push(9);
push(8);
push(7);
push(6);
push(5);
push(4);
push(3);
push(2);
push(1);

console.log("Given Linked List<br/>");
printList();

head = reverse(head, 3);

console.log("Reversed list<br/>");
printList();



Q.3 Merge a linked list into another linked list at alternate positions.

Ans. class Node {
  constructor() {
    this.data = 0;
    this.next = null;
  }
}

/* Function to insert a node at the beginning */
function push(head_ref, new_data) {
  var new_node = new Node();
  new_node.data = new_data;
  new_node.next = head_ref;
  head_ref = new_node;
  return head_ref;
}

/* Utility function to print a singly linked list */
function printList(head) {
  var temp = head;
  while (temp != null) {
    console.log(temp.data + " ");
    temp = temp.next;
  }
  console.log("<br>");
}

function merge(p, q) {
  var p_curr = p,
    q_curr = q;
  var p_next, q_next;

  // While there are available positions in p
  while (p_curr != null && q_curr != null) {
    // Save next pointers
    p_next = p_curr.next;
    q_next = q_curr.next;

    // Make q_curr as next of p_curr
    q_curr.next = p_next; // Change next pointer of q_curr
    p_curr.next = q_curr; // Change next pointer of p_curr

    // Update current pointers for next iteration
    p_curr = p_next;
    q_curr = q_next;
  }

  q = q_curr; // Update head pointer of second list
  return q;
}

// Driver code
var p = null,
  q = null;
p = push(p, 3);
p = push(p, 2);
p = push(p, 1);
console.log("First Linked List:");
printList(p);
q = push(q, 8);
q = push(q, 7);
q = push(q, 6);
q = push(q, 5);
q = push(q, 4);
console.log("Second Linked List:");
printList(q);
q = merge(p, q);
console.log("Modified First Linked List:");
printList(p);
console.log("Modified Second Linked List:");
printList(q);

Q.4 In an array, Count Pairs with given sum

Ans. function getPairsCount(arr, n, sum) {
  let count = 0; // Initialize result

  // Consider all possible pairs and check their sums
  for (let i = 0; i < n; i++)
    for (let j = i + 1; j < n; j++) if (arr[i] + arr[j] == sum) count++;

  return count;
}

let arr = [1, 5, 7, -1];
let n = arr.length;
let sum = 6;
console.log("Count of pairs is " + getPairsCount(arr, n, sum));

Q.5  Find duplicates in an array

Ans.
const arry = [1, 2, 1, 3, 4, 3, 5];

const toFindDuplicates = (arry) =>
  arry.filter((item, index) => arry.indexOf(item) !== index);
const duplicateElements = toFindDuplicates(arry);
console.log(duplicateElements);


Q.6 Find the Kth largest and Kth smallest number in an array
Ans.  
 
function kLargest(arr, n, k) {
  // Sort the given array arr in reverse
  // order.
  arr.sort((a, b) => b - a);

  // Print the first kth largest elements
  for (let i = 0; i < k; i++) 
  console.log(arr[i] + " ");
}

// driver program
let arr = [1, 23, 12, 9, 30, 2, 50];
let n = arr.length;
let k = 3;
kLargest(arr, n, k);


function kLsmallest(arr, n, k) {
  // Sort the given array arr in reverse
  // order.
  arr.sort((a, b) => a - b);

  // Print the first kth smallest elements
  for (let i = 0; i < k; i++) 
console.log(arr[i] + " ");
}

// driver program
let arr = [1, 23, 12, 9, 30, 2, 50];
let n = arr.length;
let k = 3;
ksmallest(arr, n, k);



Q.7 Move all the negative elements to one side of the array
 
Ans.
function move(arr) {
  arr.sort();
}

let arr = [-1, 2, -3, 4, 5, 6, -7, 8, 9];
move(arr);
for (let e of arr) 
console.log(e, " ");

Q.8 Reverse a string using a stack data structure

class Stack {
  size;
  top;
  a = [];

  // Function to check if stack is empty
  isEmpty() {
    return this.top < 0;
  }

  constructor(n) {
    this.top = -1;
    this.size = n;
    this.a = new Array(this.size);
  }

  // Function to push element in Stack
  push(x) {
    if (this.top >= this.size) {
      document.write("Stack Overflow<br>");
      return false;
    } else {
      this.a[++this.top] = x;
      return true;
    }
  }

  // Function to pop element from stack
  pop() {
    if (this.top < 0) {
      document.write("Stack Underflow<br>");
      return 0;
    } else {
      let x = this.a[this.top--];
      return x;
    }
  }
}

// Function to reverse the string
function reverse(str) {
  // Create a stack of capacity
  // equal to length of string
  let n = str.length;
  let obj = new Stack(n);

  // Push all characters of string
  // to stack
  let i;
  for (i = 0; i < n; i++) obj.push(str[i]);

  // Pop all characters of string
  // and put them back to str
  for (i = 0; i < n; i++) {
    let ch = obj.pop();
    str[i] = ch;
  }
}

// Driver Code
let s = "Mayankgupta".split("");

// Call reverse method
reverse(s);

// Print the reversed string
console.log("Reversed string is " + s.join(""));



Q.9 Evaluate a postfix expression using stack
Ans.
 function evaluatePostfix(exp) {
  // create a stack
  let stack = [];

  // Scan all characters one by one
  for (let i = 0; i < exp.length; i++) {
    let c = exp[i];

    if (c == " ") {
      continue;
    }

    // If the scanned character is an
    // operand (number here),extract
    // the number. Push it to the stack.
    else if (c >= "0" && c <= "9") {
      let n = 0;

      // extract the characters and
      // store it in num
      while (c >= "0" && c <= "9") {
        n = n * 10 + (c - "0");
        i++;
        c = exp[i];
      }
      i--;

      // push the number in stack
      stack.push(n);
    }

    // If the scanned character is
    // an operator, pop two elements
    // from stack apply the operator
    else {
      let val1 = stack.pop();
      let val2 = stack.pop();

      switch (c) {
        case "+":
          stack.push(val2 + val1);
          break;

        case "-":
          stack.push(val2 - val1);
          break;

        case "/":
          stack.push(parseInt(val2 / val1, 10));
          break;

        case "*":
          stack.push(val2 * val1);
          break;
      }
    }
  }
  return stack.pop();
}

let exp = "100 200 + 2 / 5 * 7 +";
console.log(evaluatePostfix(exp));



Q.10 Implement a queue using the stack data structure

Ans. class Queue {
  constructor() {
    this.s1 = [];
    this.s2 = [];
  }

  enQueue(x) {
    // Move all elements from s1 to s2
    while (this.s1.length != 0) {
      this.s2.push(this.s1.pop());
      //s1.pop();
    }

    // Push item into s1
    this.s1.push(x);

    // Push everything back to s1
    while (this.s2.length != 0) {
      this.s1.push(this.s2.pop());
      //s2.pop();
    }
  }

  // Dequeue an item from the queue
  deQueue() {
    // If first stack is empty
    if (this.s1.length == 0) {
      console.log("Q is Empty");
    }

    // Return top of s1
    let x = this.s1[this.s1.length - 1];
    this.s1.pop();
    return x;
  }
}

// Driver code
let q = new Queue();
q.enQueue(1);
q.enQueue(2);
q.enQueue(3);

console.log(q.deQueue());
console.log(q.deQueue());
console.log(q.deQueue());

